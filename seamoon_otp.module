<?php
/**
* @file
* Custom functions for Seamoon OTP Key.
*/

// Default Brand"s name of Seamoon OTP Key (singular): 
define("SEAMOON_OTP_URLS_EXCLUDED", "otp_key|otp_key_login|otp_key_paired|logout");

// Default Brand"s name of Seamoon OTP Key (singular): 
define("SEAMOON_OTP_NAME", "Seamoon OTP Key");

// Default Brand"s name of Seamoon OTP Key (plural): 
define("SEAMOON_OTP_NAME_PLUR", "Seamoon OTP Keys");

// Default Brand"s name of Seamoon OTP Key (short singular): 
define("SEAMOON_OTP_NAME_SING_SHORT", "OTP Key");

// Default Brand"s name of Seamoon OTP Key (short plural): 
define("SEAMOON_OTP_NAME_PLUR_SHORT", "OTP Keys");

// Default seamoon_otp_intro
define("SEAMOON_OTP_INTRO", "");

// Default seamoon_otp_des_pair
define("SEAMOON_OTP_DESCRIPTION", "");

// Default paired confirmation message
define("SEAMOON_OTP_CONFIRM_PAIR", "Your Seamoon\"s key pairing phase is completed correctly.");

// Default seamoon_otp_intro
define("SEAMOON_OTP_LOGIN_INTRO", "");

// Default seamoon_otp_intro
define("SEAMOON_OTP_LOGIN_DESCRIPTION", "");

// Default url to redirect users after correct pair
define("SEAMOON_OTP_PAIRED_REDIR", "");

// Default url to redirect users after correct login
define("SEAMOON_OTP_LOGIN_REDIR", "user/login");

/**
 * Implements hook_init()
 */
function seamoon_otp_init() {
  // Define global variables
  global $user, $language, $seamoon_otp_conf;

  $seamoon_otp_conf = array(
    'active'  => variable_get('seamoon_otp_active', FALSE),
    'pairing' => variable_get('seamoon_otp_pairing', FALSE),
    'user_paired' => seamoon_otp_check_user_pair_exist($user->uid),
    'user_chkrole' => seamoon_otp_chkrole($user->uid)
  );

  // Define variables for checking
  $excluded = ( seamoon_otp_url_excluded() !== FALSE ) ? 1 : 0;

  // Check in onload page
  if ( $seamoon_otp_conf['active'] && $seamoon_otp_conf['user_chkrole'] && $excluded == 0 && $user->uid > 1 ) {

    // Redirect, if the users are keylogged
    if ( !isset($_COOKIE['seamoon_otp_key_logged']) && !empty($seamoon_otp_conf['user_paired']) ) {
      drupal_goto( seamoon_otp_baseUrl('otp_key_login') );
    }

    // Redirect, if the user is not paired and the pairing phase is mandatory, take the action below
    if ( $seamoon_otp_conf['pairing'] == 'mandatory' && empty($seamoon_otp_conf['user_paired']) ) {
      drupal_goto( seamoon_otp_baseUrl('otp_key') );
    }
  }

  // Reset nocache_otp cookie
  if ( isset($_COOKIE['nocache_otp']) && $_COOKIE['seamoon_otp_key_logged'] == 'Y' ) {
    setcookie('nocache_otp', "", time() - 86400, ini_get('session.cookie_path'), ini_get('session.cookie_domain'), ini_get('session.cookie_secure') == '1');
  }
}

/*
 * Implementation of hook_menu()
 */
function seamoon_otp_menu() {

    $items = array();
    
    $brand_name_plur_short = variable_get('seamoon_otp_name_plur_short', SEAMOON_OTP_NAME_PLUR_SHORT);
  
    $items['admin/user/seamoon_otp'] = array(
        'title' => t("Seamoon OTP"),
        'description' => t("Dashboard for Seamoon OTP Keys"),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('seamoon_otp_admin_config'),
        'access arguments' => array('administer seamoon otp'),
        'file' => 'seamoon_otp.admin.inc',
        'type' => MENU_NORMAL_ITEM,
    );
  
    $items['admin/user/seamoon_otp/config'] = array(
        'title' => t("Configuration"),
        'description' => t("Dashboard for Seamoon OTP Keys"),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('seamoon_otp_admin_config'),
        'access arguments' => array('administer seamoon otp'),
        'file' => 'seamoon_otp.admin.inc',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 0,
    );
    
    $items['admin/user/seamoon_otp/listkey'] = array(
        'title' => t('Paired list keys'),
        'description' => "View Keys.",
        'page callback' => 'seamoon_otp_list_keys',
        'access arguments' => array('administer seamoon otp'),
        'file' => 'seamoon_otp.admin.inc',
        'type' => MENU_LOCAL_TASK,
        'weight' => 20,
    );
    
    $items['admin/user/seamoon_otp/key/%/delete'] = array(
        'title' => t( '%s - Delete pairing', array('%s' => $brand_name_plur_short) ),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('seamoon_otp_del_pair_confirm_form'),
        'access arguments' => array('administer seamoon otp'),
        'file' => 'seamoon_otp.admin.inc',
        'type' => MENU_CALLBACK, 
    );
    
    $items['otp_key'] = array(
        'title' => t('%s - Pair your digital key', array('%s' => $brand_name_plur_short)),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('seamoon_otp_key_pair_form'),
        'access callback' => 'seamoon_otp_chkrole',
        'access arguments' => array(1),
        'file' => 'seamoon_otp.pages.inc',
        'type' => MENU_CALLBACK,
    );
    
    $items['otp_key_paired'] = array(
        'title' => t('%s - Paired', array('%s' => $brand_name_plur_short)),
        'page callback' => 'seamoon_otp_key_paired',
        'page arguments' => array(1),
        'access callback' => 'seamoon_otp_chkrole',
        'access arguments' => array(1),
        'file' => 'seamoon_otp.pages.inc',
        'type' => MENU_CALLBACK,
    );
    
    $items['otp_key_login'] = array(
        'title' => t('%s - Login', array('%s' => $brand_name_plur_short)),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('seamoon_otp_key_login_form'),
        'access callback' => 'seamoon_otp_chkrole',
        'access arguments' => array(1),
        'file' => 'seamoon_otp.pages.inc',
        'type' => MENU_CALLBACK,
    );
    
    return $items;

}

/**
 * Implements hook_user().
 */
function seamoon_otp_user($op, &$edit, &$account, $category = NULL) {
  // Define global variables
  global $language, $user, $seamoon_otp_conf;
  
  // Make switch for $op = operation
  switch ($op) {
    case 'load':
      break;
    case 'login':

      // Check in onload page
      if ( $seamoon_otp_conf['active'] && $seamoon_otp_conf['user_chkrole'] && $user->uid > 1 ) {

        // If the OTP Seamoon is active and user is already paired, take the
        // action below
        if ( empty($_COOKIE['seamoon_otp_key_logged']) && !empty($seamoon_otp_conf['user_paired']) ) {
          drupal_goto( seamoon_otp_baseUrl('otp_key_login') );
        }

        // Redirect, if the user is not paired and the pairing phase is
        // mandatory, take the action below
        if ( $seamoon_otp_conf['pairing'] == 'mandatory' && empty($seamoon_otp_conf['user_paired']) ) {
          drupal_goto( seamoon_otp_baseUrl('otp_key') );
        }

        // If the pairing is mandatory procede to set a nocache_otp cookie
        if ( $seamoon_otp_conf['pairing'] == 'mandatory' || ( !isset($_COOKIE['seamoon_otp_key_logged']) && !empty($seamoon_otp_conf['user_paired']) ) ) {
            setcookie('nocache_otp', '1', time() + ini_get('session.cookie_lifetime'), ini_get('session.cookie_path'), ini_get('session.cookie_domain'), ini_get('session.cookie_secure') == '1');
        }

      }

      break;
    case 'logout':
      
      setcookie('nocache_otp', '', time() - 86400, ini_get('session.cookie_path'), ini_get('session.cookie_domain'), ini_get('session.cookie_secure') == '1');
      setcookie('seamoon_otp_key_logged', "", time() - 86400, ini_get('session.cookie_path'), ini_get('session.cookie_domain'), ini_get('session.cookie_secure') == '1');
      
      break;
  }

}

/**
 * Implements hook_theme().
 */
function seamoon_otp_theme() {
  return array(
    'otp_key_paired' => array(
      'arguments' => array(
        'type' => NULL, 
        'title' => NULL, 
        'content' => NULL, 
       ),
      'template' => 'node-seamoon-otp', 
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function seamoon_otp_form_alter(&$form, &$form_state, $form_id) {
  // Define global variables
  global $language;

  if ( $form_id == 'seamoon_otp_key_pair_form' ) {

    $alias_redirect  = drupal_get_path_alias('otp_key_paired', $language->language);

    $form['#redirect'] = array($alias_redirect);

  }

  return $form;
}

/**
 * Check if an user is part of role enabled
 */
function seamoon_otp_chkrole() {
  // Define global variables
  global $user;
  
  // Get roles
  $roles = $user->roles;
 
  // unset roles 0, 1 and 2 (anonymous, authenticated and group zero)
  foreach ($roles as $k => $v) {
      if ( $k==0 || $k==1 || $k==2 ) unset($roles[$k]);
  }
  
  $rolesActive = seamoon_otp_getUserRoles('key');
  
  if ( array_intersect_key( $roles, $rolesActive ) ) {
    $authorized = TRUE;
  } else if ( $user->uid == 1 ) {
    // Return always true if user is the admin
    $authorized = TRUE;
  } else {
    $authorized = FALSE;
  }  
    
  return $authorized;
}

/**
 * Check if serial number really exist
 */
function seamoon_otp_check_sn_exist($sn) {
  // Make the query
  $query = db_query("SELECT {seamoon_otp_sn}.serial_number, {seamoon_otp_sn}.serial_number_key FROM {seamoon_otp_sn} WHERE {seamoon_otp_sn}.serial_number = '%s'", array('%s' => $sn) );

  // Fetch the data
  $check = db_fetch_object($query);

  return $check;
}

/**
 * Check if serial number pair already exist
 */
function seamoon_otp_check_sn_pair_exist($sn) {
  // Make the query
  $query = db_query("SELECT {seamoon_otp_users}.serial_number FROM {seamoon_otp_users} WHERE {seamoon_otp_users}.serial_number = '%s'", array('%s' => $sn) );

  // Fetch the data
  $check = db_fetch_object($query);

  return $check;
}

/**
 * Check if user is already paired with a serial number
 */
function seamoon_otp_check_user_pair_exist($uid) {
  // Make the query
  $query = db_query("SELECT * FROM {seamoon_otp_users} WHERE uid = '%s'", array('%s' => $uid) );

  // Fetch the data
  $check = db_fetch_object($query);

  return !empty($check->uid) ? $check->uid : false;
}

/**
 * Retrieve serial number info fro muser
 */
function seamoon_otp_get_user_sn_info($id) {
  // Make the query
  $query = db_query("SELECT * FROM {seamoon_otp_sn},{seamoon_otp_users} WHERE {seamoon_otp_sn}.serial_number = {seamoon_otp_users}.serial_number AND {seamoon_otp_users}.uid = '%s'", array('%s' => $id) );

  // Fetch the data
  $check = db_fetch_object($query);  

  return $check;
}

/**
 * Helper function, get seamoon user roles
 *
 * @param $all_roles = return all user roles
 * @return array of user roles
 */
function seamoon_otp_getUserRoles($what) {
  // Retrieve all roles
  $roles = user_roles();
  
  // unset roles 1 (anonymous)
  foreach ($roles as $k => $v) {
      if ( $k==1 || $k==2 ) unset($roles[$k]);
  }
  
  // return array
  if ($what == 'all') {
    return $roles;
  } else if ($what == 'key') {
    
    $seamoon_otp_roles = variable_get('seamoon_otp_roles', array());
   
    foreach ($seamoon_otp_roles as $k => $v) {
        if ( $k==0 || $k==1 || $k==2 || $v==0) unset($seamoon_otp_roles[$k]);
    }
  
    return ($seamoon_otp_roles);

  } else {
    $seamoon_otp_roles = array();
    foreach (variable_get('seamoon_otp_roles', array()) as $key) {
      $seamoon_otp_roles[$key] = $roles[$key];
    }
    return $seamoon_otp_roles;
  }  
}

/**
 * Helper function, use strpos with array
 *
 * @return position if value exist
 */
function seamoon_otp_url_excluded() {
  // Take the constant with urls to exclude
  $urlsToExclude = explode('|', SEAMOON_OTP_URLS_EXCLUDED);

  $alias = drupal_get_path_alias($_GET["q"]);

  // Force $urlsToExclude to be an array
  if(!is_array($urlsToExclude)) $urlsToExclude = array($urlsToExclude);
  
  // MAke the check and return the pos
  foreach($urlsToExclude as $element) {
    if(($pos = strpos($alias, $element))!==false) return $pos;
  }
  
  // Return FALSE if no match
  return FALSE;
}

/**
 * Make the base url for redirects
 *
 * @param string $path
 * @return base url
 */
function seamoon_otp_baseUrl($path) {
  // Define global variables
  global $language;

  // Extract URL elements from parse_url
  $domparts = parse_url( $_SERVER["HTTP_HOST"] ); 
  $domainUrl   = empty($domparts["host"]) ? $domparts["path"] : $domparts["host"];
  $domainProto = isset($_SERVER["HTTPS"]) ? 'https://' : 'http://';
  $domainLang  = !empty($language->prefix) ? $language->prefix.'/' : '/';

  // Prepare the URL
  $baseUrl = $domainProto . $domainUrl . $domainLang . $path;

  // Return the baseUrl
  return $baseUrl;
}

/**
 * Add class otp-mandatory in the body
 */
function seamoon_otp_preprocess_page(&$variables) {
    // Get setting for pairing
    $pairing = variable_get('seamoon_otp_pairing', FALSE);
    
    // Add class in the body
    if ( $pairing == 'mandatory' ) {
        // string to array
        $classes = explode(' ', $variables['body_classes']);
        // add your class to the array
        $classes[] = 'otp-mandatory';
        // assign it to the body_classes_array
        $variables['body_classes_array'] = $classes;
        // from array to string into body_classes
        $variables['body_classes'] = implode(' ', $classes); // Concatenate with spaces.
    }
}

/**
 * hook_perm()
 */
function seamoon_otp_perm() {
  return array('administer seamoon otp');
}
