<?php
// $Id: seamoon_otp_key.module

/**
* @file
* Custom functions for Seamoon OTP Key.
*/

// Default Brand's name of Seamoon OTP Key (singular): 
define(_SEAMOON_OTP_NAME, 'Seamoon OTP Key');

// Default Brand's name of Seamoon OTP Key (plural): 
define(_SEAMOON_OTP_NAME_PLUR, 'Seamoon OTP Keys');

// Default Brand's name of Seamoon OTP Key (short singular): 
define(_SEAMOON_OTP_NAME_SING_SHORT, 'OTP Key');

// Default Brand's name of Seamoon OTP Key (short plural): 
define(_SEAMOON_OTP_NAME_PLUR_SHORT, 'OTP Keys');

// Default seamoon_otp_intro
define(_SEAMOON_OTP_INTRO, '');

// Default seamoon_otp_des_pair
define(_SEAMOON_OTP_DESCRIPTION, '');

// Default paired confirmation message
define(_SEAMOON_OTP_CONFIRM_PAIR, 'Your Seamoon\'s key pairing phase is completed correctly.');

// Default seamoon_otp_intro
define(_SEAMOON_OTP_LOGIN_INTRO, '');

// Default seamoon_otp_intro
define(_SEAMOON_OTP_LOGIN_DESCRIPTION, '');

// Default url to redirect users after correct pair
define(_SEAMOON_OTP_PAIRED_REDIR, '' );

// Default url to redirect users after correct login
define(_SEAMOON_OTP_LOGIN_REDIR, 'user/login' );

/**
 * Implements hook_init().
 */
function seamoon_otp_init() {
    
    global $_COOKIE, $user, $language;

    $lang = $language->language;
    
    if (!empty($_POST["form_id"]) && ($_POST["form_id"] == 'seamoon_otp_key_pair_form' || $_POST["form_id"] == 'seamoon_otp_key_login_form') ) {

        require dirname(__FILE__) . '/phpsdk/seamoonapi.php';

    }
    
    $active = variable_get('seamoon_otp_active', FALSE);
    $switch_off = variable_get('seamoon_otp_switch_off', FALSE);
    $user_paired = _seamoon_otp_check_user_pair_exist($user->uid);
    $user_chkrole = _seamoon_otp_chkrole($user->uid);
    $user_key_logged = $_COOKIE['seamoon_otp_key_logged'];
    $urlToExclude = array('otp_key', 'otp_key_login', 'otp_key_paired', 'logout');
    $alias = drupal_get_path_alias($_GET["q"]);
    $excluded = ( _seamoon_otp_strpos_arr($alias, $urlToExclude) !== FALSE ) ? 1 : 0;

    // extract the real domain url from referer
    //$domainparts = parse_url( !empty($_SERVER["HTTP_REFERER"]) ? $_SERVER["HTTP_REFERER"] : $_SERVER["HTTP_HOST"] ); 
    $domainparts = parse_url( $_SERVER["HTTP_HOST"] ); 
    $domainUrl = empty($domainparts["host"]) ? $domainparts["path"] : $domainparts["host"];

    // check onload page if the users are keylogged
    if ( $active && $user_paired->uid && $user_key_logged != 'Y' && $user_chkrole && $excluded == 0 ) {
                
        $redirectTo = $lang . '/otp_key_login';
        $redirectTo = 'http://' . $domainUrl . '/' . $redirectTo;

        drupal_goto($redirectTo);

    }

    // If the user is not paired and the pairing phase is mandatory, take the action below
    if ( $active && $switch_off == 'mandatory' && empty($user_paired->uid) && $user->uid > 1 && $user_chkrole && $excluded == 0 ) {

        $redirectTo = $lang . '/otp_key';
        $redirectTo = 'http://' . $domainUrl . '/' . $redirectTo;

        drupal_goto($redirectTo);

    }

    // Reset nocache_otp cookie
    if ( $_COOKIE['nocache_otp'] == '1' && $user_key_logged == 'Y' ) {

        setcookie('nocache_otp', "", time() - 86400, ini_get('session.cookie_path'), ini_get('session.cookie_domain'), ini_get('session.cookie_secure') == '1');

    }
}

/**
 * Implements hook_menu().
 */
function seamoon_otp_menu() {

    $items = array();
    
    $brand_name_plur_short = variable_get('seamoon_otp_name_plur_short', _SEAMOON_OTP_NAME_PLUR_SHORT);
  
    $items['admin/user/seamoon_otp'] = array(
        'title' => t("Seamoon OTP"),
        'description' => t("Dashboard for Seamoon OTP Keys"),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('seamoon_otp_admin_config'),
        'access arguments' => array('administer seamoon otp'),
        'file' => 'seamoon_otp.admin.inc',
        'type' => MENU_NORMAL_ITEM,
    );
  
    $items['admin/user/seamoon_otp/config'] = array(
        'title' => t("Configuration"),
        'description' => t("Dashboard for Seamoon OTP Keys"),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('seamoon_otp_admin_config'),
        'access arguments' => array('administer seamoon otp'),
        'file' => 'seamoon_otp.admin.inc',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 0,
    );
    
    $items['admin/user/seamoon_otp/listkey'] = array(
        'title' => t('Paired list keys'),
        'description' => "View Keys.",
        'page callback' => 'seamoon_otp_list_keys',
        'access arguments' => array('administer seamoon otp'),
        'file' => 'seamoon_otp.admin.inc',
        'type' => MENU_LOCAL_TASK,
        'weight' => 20,
    );
    
    $items['admin/user/seamoon_otp/key/%/delete'] = array(
        'title' => t( '%s - Delete pairing', array('%s' => $brand_name_plur_short) ),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('seamoon_otp_del_pair_confirm_form'),
        'access arguments' => array('administer seamoon otp'),
        'file' => 'seamoon_otp.admin.inc',
        'type' => MENU_CALLBACK, 
    );
    
    $items['otp_key'] = array(
        'title' => t('%s - Pair your digital key', array('%s' => $brand_name_plur_short)),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('seamoon_otp_key_pair_form'),
        'access callback' => '_seamoon_otp_chkrole',
        'access arguments' => array(1),
        'file' => 'seamoon_otp.pages.inc',
        'type' => MENU_CALLBACK,
    );
    
    $items['otp_key_paired'] = array(
        'title' => t('%s - Paired', array('%s' => $brand_name_plur_short)),
        'page callback' => 'seamoon_otp_key_paired',
        'page arguments' => array(1),
        'access callback' => '_seamoon_otp_chkrole',
        'access arguments' => array(1),
        'file' => 'seamoon_otp.pages.inc',
        'type' => MENU_CALLBACK,
    );
    
    $items['otp_key_login'] = array(
        'title' => t('%s - Login', array('%s' => $brand_name_plur_short)),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('seamoon_otp_key_login_form'),
        'access callback' => '_seamoon_otp_chkrole',
        'access arguments' => array(1),
        'file' => 'seamoon_otp.pages.inc',
        'type' => MENU_CALLBACK,
    );
    
    return $items;

}


/**
 * Implements hook_user().
 */
function seamoon_otp_user($op, &$edit, &$account, $category = NULL) {

  global $language;
  
  $lang = $language->language;

  switch ($op) {
    case 'load':
      break;
    case 'update':
      break;
    case 'insert':
      break;
    case 'register':
      break;
    case 'login':
      // START check
                  
      $active = variable_get('seamoon_otp_active', FALSE);
      $switch_off = variable_get('seamoon_otp_switch_off', FALSE);
      $user_paired = _seamoon_otp_check_user_pair_exist($account->uid);
      $user_key_logged = $_COOKIE['seamoon_otp_key_logged'];
      $user_chkrole = _seamoon_otp_chkrole($user->uid);
      
      //var_dump($user_paired); exit;

      // extract the real domain url from referer
      //$domainparts = parse_url( !empty($_SERVER["HTTP_REFERER"]) ? $_SERVER["HTTP_REFERER"] : $_SERVER["HTTP_HOST"] ); 
      $domainparts = parse_url( $_SERVER["HTTP_HOST"] ); 
      $domainUrl = empty($domainparts["host"]) ? $domainparts["path"] : $domainparts["host"];
        
      // If the mandatory pairing is mandatory procede to set a nocache_otp cookie
      if ( ( $switch_off == 'mandatory' && $active && $user_chkrole ) || ( $active && $user_chkrole && !$user_key_logged && !empty($user_paired->uid) ) ) {

          setcookie('nocache_otp', '1', time() + ini_get('session.cookie_lifetime'), ini_get('session.cookie_path'), ini_get('session.cookie_domain'), ini_get('session.cookie_secure') == '1');

      }
      
      // If the OTP Seamoon is active and user is already paired, take the action below
      if ( $active && $user_chkrole && !empty($user_paired->uid) && empty($user_key_logged) ) {

        $urlA = $lang . '/otp_key_login';
        $urlA = 'http://' . $domainUrl . '/' . $urlA;

        if ( $_COOKIE['drupal_uid'] == 90662 ) {

            //var_dump($urlA); exit;

        }

        // go to association page
        drupal_goto($urlA); 

      }

      // If the user is not paired and the pairing phase is mandatory, take the action below
      if ( $active && $user_chkrole && $switch_off == 'mandatory' && empty($user_paired->uid) && $account->uid != 1 ) {

        //$urlB = base_path() . $lang . '/otp_key';
        $urlB = $lang . '/otp_key';
        $urlB = 'http://' . $domainUrl . '/' . $urlB;

        // go to association page
        drupal_goto($urlB);

      }

      // END check
      break;
    case 'logout':
      
      setcookie('nocache_otp', '', time() - 86400, ini_get('session.cookie_path'), ini_get('session.cookie_domain'), ini_get('session.cookie_secure') == '1');
      setcookie('seamoon_otp_key_logged', "", time() - 86400, ini_get('session.cookie_path'), ini_get('session.cookie_domain'), ini_get('session.cookie_secure') == '1');
      
      break;
  }

}


/**
 * Implements hook_theme().
 */
function seamoon_otp_theme() {
  return array(
    'otp_key_paired' => array(
      'arguments' => array(
        'type' => NULL, 
        'title' => NULL, 
        'content' => NULL, 
       ),
      'template' => 'node-seamoon-otp', 
    ),
  );
}


/**
 * Implements hook_form_alter().
 */
function seamoon_otp_form_alter(&$form, &$form_state, $form_id) {

  global $language;

  $lang = $language->language;

  if ( $form_id == 'seamoon_otp_key_pair_form' ) {

    $alias_redirect  = drupal_get_path_alias('otp_key_paired', $lang);

    $form['#redirect'] = array($alias_redirect);

  }

  return $form;
}


/**
 * Check if an user is part of role enabled
 */
function _seamoon_otp_chkrole() {
    
  global $user;
  
  $roles = $user->roles;
 
  // unset roles 0, 1 and 2 (anonymous, authenticated and group zero)
  foreach ($roles as $k => $v) {
      if ( $k==0 || $k==1 || $k==2 ) unset($roles[$k]);
  }
  
  $rolesActive = _seamoon_otp_get_roles('key');
  
  if ( array_intersect_key( $roles, $rolesActive ) ) {
    $authorized = TRUE;
  } else {
    $authorized = FALSE;
  }
  
  // return always true if user is the admin
  if ( $user->uid == 1 ) {
    $authorized = TRUE;
  }
    
  return $authorized;
}


/**
 * Check if serial number really exist
 */
function _seamoon_otp_check_sn_exist($sn) {

  $queryIfSnExist = db_query("SELECT {seamoon_otp_sn}.serial_number, {seamoon_otp_sn}.serial_number_key FROM {seamoon_otp_sn} WHERE {seamoon_otp_sn}.serial_number = '%s'", array('%s' => $sn) );
  $check = db_fetch_object($queryIfSnExist);

  return $check;

}


/**
 * Check if serial number pair already exist
 */
function _seamoon_otp_check_sn_pair_exist($sn) {

  $queryIfSnAssociated = db_query("SELECT {seamoon_otp_users}.serial_number FROM {seamoon_otp_users} WHERE {seamoon_otp_users}.serial_number = '%s'", array('%s' => $sn) );
  $check = db_fetch_object($queryIfSnAssociated);

  return $check;

}


/**
 * Check if user is already paired with a serial number
 */
function _seamoon_otp_check_user_pair_exist($id) {

  $queryIfSnAssociated = db_query("SELECT * FROM {seamoon_otp_users} WHERE uid = '%s'", array('%s' => $id) );
  $check = db_fetch_object($queryIfSnAssociated);

  return $check;

}

/**
 * Retrieve serial number info fro muser
 */
function _seamoon_otp_get_user_sn_info($id) {

  $querySnkey = db_query("SELECT * FROM {seamoon_otp_sn},{seamoon_otp_users} WHERE {seamoon_otp_sn}.serial_number = {seamoon_otp_users}.serial_number AND {seamoon_otp_users}.uid = '%s'", array('%s' => $id) );
  $check = db_fetch_object($querySnkey);  

  return $check;

}


/**
 * Helper function, get  seamoon user roles
 * @param $all_roles = return all user roles
 * @return array of user roles
 */
function _seamoon_otp_get_roles($what) {
  
  $roles = user_roles();
  
  // unset roles 1 (anonymous)
  foreach ($roles as $k => $v) {
      if ( $k==1 || $k==2 ) unset($roles[$k]);
  }
  
  // return array
  if ($what == 'all') {
    return $roles;
  } else if ($what == 'key') {
    
    $seamoon_otp_roles = variable_get('seamoon_otp_roles', array());
   
    foreach ($seamoon_otp_roles as $k => $v) {
        if ( $k==0 || $k==1 || $k==2 || $v==0) unset($seamoon_otp_roles[$k]);
    }
  
    return ($seamoon_otp_roles);

  } else {
    $seamoon_otp_roles = array();
    foreach (variable_get('seamoon_otp_roles', array()) as $key) {
      $seamoon_otp_roles[$key] = $roles[$key];
    }
    return $seamoon_otp_roles;
  }
  
}


/**
 * Helper function, use strpos with array
 * @return $pos value if exist
 */
function _seamoon_otp_strpos_arr($haystack, $needle) {

  if(!is_array($needle)) $needle = array($needle);
  
  foreach($needle as $what) {
    if(($pos = strpos($haystack, $what))!==false) return $pos;
  }
  
  return FALSE;

}




/**
 * Add class otp-mandatory in the body
 *
 */
function seamoon_otp_preprocess_page(&$variables) {
    
    $switch_off = variable_get('seamoon_otp_switch_off', FALSE);
    
    if ( $switch_off == 'mandatory' ) {
        // string to array
        $classes = explode(' ', $variables['body_classes']);
        // add your class to the array
        $classes[] = 'otp-mandatory';
        // assign it to the body_classes_array
        $variables['body_classes_array'] = $classes;
        // from array to string into body_classes
        $variables['body_classes'] = implode(' ', $classes); // Concatenate with spaces.
    }

}

/**
 * hook_perm()
 */
function seamoon_otp_perm() {
  return array('administer seamoon otp');
}
